{"version":3,"sources":["components/Navbarcomp.jsx","components/RightPart.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbarcomp","Navbar","bg","variant","Brand","href","Nav","className","activeKey","Item","Link","eventKey","Component","RightPart","state","selectedState","data","country","label","id","value","Container","Row","Col","this","map","obj","index","lab","labIndex","type","onChange","e","indexOf","splice","push","setState","Portugal","length","val","idx","Alert","key","onClick","values","aria-hidden","Nicaragua","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0fc6c9b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nexport default class Navbarcomp extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                 <Navbar bg=\"light\" variant=\"light\">\r\n                    <Navbar.Brand href=\"#home\">Logo</Navbar.Brand>\r\n                    <Nav className=\"justify-content-end\" activeKey=\"/home\">\r\n                        <Nav.Item>\r\n                        <Nav.Link href=\"/home\">Home</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                        <Nav.Link eventKey=\"link-1\">My Portfolio</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                        <Nav.Link eventKey=\"link-2\">Clients</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\n\r\nexport default class RightPart extends Component {\r\n  \r\n\r\n    state = {\r\n        selectedState: {},\r\n         data: [{\r\n            country: 'Portugal',\r\n            label: [{ id: 0, value: \"Aasiya Jayavant\" }, { id: 1, value: \"Luvleen Lawrence\" }, { id: 2, value: \"Rey Mibourne\" }, { id: 3, value: \"Cayla Brister\" }]\r\n        },\r\n        {\r\n            country: 'Nicaragua',\r\n            label: [{ id: 0, value: \"Deveedaas Nandi\" }, { id: 1, value: \"Obasey Chidy\" }, { id: 2, value: \"Xenie Dolezelova\" }, { id: 3, value: \"Ezequiel Dengra\" }]\r\n        },\r\n        {\r\n            country: 'Marshall Islands',\r\n            label: [{ id: 0, value: \"Aaron Almaraz\" }, { id: 1, value: \"Jelena Denisova\" }]\r\n        }\r\n    ]\r\n    }\r\n\r\n    render() {\r\n\r\n        return ( <div >\r\n            <Container >\r\n            <Row >\r\n            <Col > {\r\n                this.state.data ?\r\n                this.state.data.map((obj, index) => {\r\n                        return ( <>\r\n                                <h5> { obj.country } </h5> \r\n                                {\r\n                                obj.label.map((lab, labIndex) => {\r\n                                    return ( \r\n                                    <>\r\n                                        <input type = \"checkbox\"\r\n                                        value = { lab.value }\r\n                                        onChange = {\r\n                                            (e) => {\r\n                                                const country = this.state.selectedState;\r\n                                                country[obj.country] = this.state.selectedState[obj.country] || [];\r\n                                                var index = country[obj.country].indexOf(lab.value);\r\n                                                if(!!~country[obj.country].indexOf(lab.value)){\r\n                                                    country[obj.country].splice(index, 1);\r\n                                                }else{\r\n                                                    country[obj.country].push(lab.value)  \r\n                                                }\r\n                                                this.setState({selectedState: country});\r\n                                            }\r\n                                        }\r\n                                        /><label> { lab.value } </label><br />  \r\n                                    </>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </>\r\n                    )\r\n                }):\r\n            null\r\n        }\r\n        </Col>\r\n    \r\n        <Col >\r\n\r\n            {this.state.selectedState.Portugal \r\n            ? \r\n                <div>\r\n                    {this.state.selectedState.Portugal.length > 0 ? <h5>Portugal</h5> : null}\r\n                    {this.state.selectedState.Portugal.map((val,idx) => {\r\n                        return(\r\n                            <Alert key={idx} variant={\"danger\"}>\r\n                                    {val}\r\n                                    <button type=\"button\" className=\"close\" \r\n                                        onClick={(e)=> \r\n                                            {\r\n                                                const values =  this.state.selectedState.Portugal;\r\n                                                const index = values.indexOf(val);\r\n                                                if(index > -1) {\r\n                                                    values.splice(index,1)\r\n                                                }\r\n                                                const state = this.state.selectedState;\r\n                                                state['Portugal'] = values;\r\n                                                this.setState({ selectedState : state})\r\n                                            }\r\n                                        }\r\n                                    >\r\n                                        <span aria-hidden=\"true\">Ã—</span><span className=\"sr-only\">Close alert</span>\r\n                                    </button>\r\n                            </Alert>)})\r\n                    }\r\n                </div>\r\n            : \r\n            null}\r\n\r\n            {this.state.selectedState.Nicaragua \r\n            ? \r\n                <div>\r\n                    {this.state.selectedState.Nicaragua.length > 0 ? <h5>Nicaragua</h5> : null}\r\n                    {this.state.selectedState.Nicaragua.map((val, idx) => {\r\n                        return(\r\n                            <Alert key={idx} variant={\"danger\"}>\r\n                                {val}\r\n                                <button type=\"button\" className=\"close\"\r\n                                 onClick={(e)=> \r\n                                    {\r\n                                        const values =  this.state.selectedState.Nicaragua;\r\n                                        const index = values.indexOf(val);\r\n                                        if(index > -1) {\r\n                                            values.splice(index,1)\r\n                                        }\r\n                                        const state = this.state.selectedState;\r\n                                        state['Nicaragua'] = values;\r\n                                        this.setState({ selectedState : state})\r\n                                    }\r\n                                }\r\n                                >\r\n                                    <span aria-hidden=\"true\">Ã—</span><span className=\"sr-only\">Close alert</span>\r\n                                </button>\r\n                            </Alert>)})} \r\n                </div> \r\n            :\r\n            null\r\n            }\r\n\r\n            {this.state.selectedState[\"Marshall Islands\"]\r\n            ? \r\n                <div>\r\n                    {this.state.selectedState[\"Marshall Islands\"].length > 0 ? <h5>Marshall Islands</h5> : null}\r\n                    {this.state.selectedState[\"Marshall Islands\"].map((val, idx) => {\r\n                        return(\r\n                        <Alert key={idx} variant={\"danger\"}>\r\n                            {val}\r\n                            <button type=\"button\" className=\"close\"\r\n                             onClick={(e)=> \r\n                                {\r\n                                    const values =  this.state.selectedState[\"Marshall Islands\"];\r\n                                    const index = values.indexOf(val);\r\n                                    if(index > -1) {\r\n                                        values.splice(index,1)\r\n                                    }\r\n                                    const state = this.state.selectedState;\r\n                                    state[\"Marshall Islands\"] = values;\r\n                                    this.setState({ selectedState : state})\r\n                                }\r\n                            }\r\n                            >\r\n                                <span aria-hidden=\"true\">Ã—</span><span className=\"sr-only\">Close alert</span>\r\n                            </button>\r\n                        </Alert>)})} \r\n                </div> \r\n            : \r\n            null}\r\n\r\n        </Col>\r\n        </Row> \r\n        </Container> \r\n    </div>\r\n    )\r\n}\r\n}","import React from 'react';\nimport './App.css';\nimport Navbarcomp from './components/Navbarcomp.jsx'\nimport RightPart from './components/RightPart.jsx'\n\nfunction App() {\n    return ( < div className = \"App\" >\n        <\n        Navbarcomp / >\n        <\n        RightPart / >\n        <\n        /div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render( < React.StrictMode > < App / > < /React.StrictMode>,document.getElementById('root'));\n\n        // If you want your app to work offline and load faster, you can change\n        // unregister() to register() below. Note this comes with some pitfalls.\n        // Learn more about service workers: https://bit.ly/CRA-PWA\n        serviceWorker.unregister();"],"sourceRoot":""}